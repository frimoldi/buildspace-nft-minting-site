{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","mintMax","setMintMax","mintedSoFar","setMintedSoFar","isMinting","setIsMinting","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","chainId","alert","accounts","length","account","setupEventListener","connectWallet","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","loadMintStats","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","getMintMax","getTotalMinted","BigNumber","useEffect","className","onClick","undefined","disabled","href","target","rel","alt","src","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68860fe7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"\nimport myEpicNft from './utils/MyEpicNFT.json'\n\n// Constants\nconst TWITTER_HANDLE = 'fran_rimoldi';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst CONTRACT_ADDRESS = \"0x5991dE28Ec6357a50f7329fd6257D1603C72827b\"\nconst OPEN_SEA_LINK = \"https://testnets.opensea.io/collection/south-park-gang-qwsxfnqupu\"\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\")\n  const [mintMax, setMintMax] = useState()\n  const [mintedSoFar, setMintedSoFar] = useState()\n  const [isMinting, setIsMinting] = useState(false)\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask!\")\n      return\n    } else {\n      console.log(\"We have the ethereum object\", ethereum)\n    }\n\n    const chainId = await ethereum.request({ method: \"eth_chainId\" })\n    console.log(\"Connected to chain \", chainId)\n\n    const rinkebyChainId = \"0x4\"\n    if (chainId !== rinkebyChainId) {\n      alert(\"You are not connected to the Rinkeby Test Network!\")\n    }\n\n    const accounts = await window.ethereum.request({method: \"eth_accounts\"})\n    if (accounts.length !== 0) {\n      const account = accounts[0]\n      console.log(\"Found and authorized account\", account)\n      setCurrentAccount(account)\n\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\")\n        return\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" })\n\n      console.log(\"Connected\", accounts[0])\n      setCurrentAccount(accounts[0])\n\n      setupEventListener()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer)\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          loadMintStats()\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can a max of 10 imns to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()} `)\n        })\n\n        console.log(\"Setup event listener!\")\n      } \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer)\n\n        console.log(\"Going to pop wallet now to pay gas ...\")\n        setIsMinting(true)\n        let nftTxn = await connectedContract.makeAnEpicNFT()\n\n        console.log(\"Mining... please wait.\")\n        await nftTxn.wait()\n\n        console.log(`Minted, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`)\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    } finally {\n      setIsMinting(false)\n    }\n  }\n\n  const loadMintStats = async () => {\n    try { \n      const { ethereum } = window\n       if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer)\n\n        const mintMax = await connectedContract.getMintMax();\n        const mintedSoFar = await connectedContract.getTotalMinted();\n\n        setMintMax(ethers.BigNumber.from(mintMax).toNumber());\n        setMintedSoFar(ethers.BigNumber.from(mintedSoFar).toNumber());\n      }\n    } catch(error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected()  \n    loadMintStats()\n  }, [])\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {\n            currentAccount === \"\" ? (\n              <button className=\"cta-button connect-wallet-button\" onClick={connectWallet}>\n                Connect to Wallet\n              </button>\n            ) : (\n              <>\n                {mintedSoFar !== undefined && mintMax !== undefined && <span className=\"minted\">{`${mintedSoFar}/${mintMax} minted so far`}</span>}\n                <br />\n                <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\" disabled={isMinting}>\n                  {isMinting ? \"Minting ...\" : \"Mint NFT\"}\n                </button>\n              </>\n            )\n          }\n          <a href={OPEN_SEA_LINK} target=\"_blank\" rel=\"noreferrer\" className=\"os-link\">{\"ðŸŒŠ View Collection on OpenSea\"}</a>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}